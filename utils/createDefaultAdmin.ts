import clientService from '@/services/ClientService';

// ============================================================================
// CRIA√á√ÉO DE USU√ÅRIO ADMIN PADR√ÉO
// ============================================================================

/**
 * Cria um usu√°rio administrador padr√£o para testes
 * Este usu√°rio pode ser usado para acessar o painel administrativo
 */
export const createDefaultAdmin = async () => {
  try {
    // Verifica se j√° existe um admin
    const existingAdmin = await clientService.getClientByEmail('admin@skillhub.com');
    
    if (existingAdmin) {
      console.log('Usu√°rio admin padr√£o j√° existe:', existingAdmin.id);
      return existingAdmin;
    }

    // Cria o admin padr√£o
    const defaultAdmin = await clientService.createClient({
      name: 'Administrador SkillHub',
      email: 'admin@skillhub.com',
      phone: '',
      company: 'SkillHub',
      role: 'admin',
      isAdmin: true,
      status: 'active',
      avatar: 'https://example.com/admin-avatar.jpg',
      lastLogin: new Date(),
      preferences: {
        theme: 'system',
        language: 'pt-BR',
        notifications: {
          email: true,
          push: true,
          sms: false,
        },
        privacy: {
          shareData: false,
          marketingEmails: false,
          analytics: true,
        },
      },
      metadata: {
        source: 'system',
        tags: ['admin', 'sistema', 'padr√£o'],
        notes: 'Usu√°rio administrador padr√£o criado pelo sistema',
        priority: 'high',
        customFields: {
          isDefaultAdmin: true,
          createdBy: 'system',
        },
      },
    });

    console.log('‚úÖ Usu√°rio admin padr√£o criado com sucesso:', defaultAdmin.id);
    console.log('üìß Email: admin@skillhub.com');
    console.log('üîë Senha: qualquer (sistema simulado)');
    
    return defaultAdmin;
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio admin padr√£o:', error);
    throw error;
  }
};

/**
 * Verifica se existe pelo menos um usu√°rio admin no sistema
 */
export const checkAdminExists = async (): Promise<boolean> => {
  try {
    const clients = await clientService.getAllClients();
    return clients.some(client => client.isAdmin);
  } catch (error) {
    console.error('Erro ao verificar exist√™ncia de admin:', error);
    return false;
  }
};

/**
 * Inicializa o sistema com um admin padr√£o se necess√°rio
 */
export const initializeSystemWithAdmin = async () => {
  try {
    const hasAdmin = await checkAdminExists();
    
    if (!hasAdmin) {
      console.log('üîÑ Sistema sem administradores. Criando admin padr√£o...');
      await createDefaultAdmin();
      console.log('‚úÖ Sistema inicializado com sucesso!');
    } else {
      console.log('‚úÖ Sistema j√° possui administradores.');
    }
  } catch (error) {
    console.error('‚ùå Erro ao inicializar sistema:', error);
  }
};
